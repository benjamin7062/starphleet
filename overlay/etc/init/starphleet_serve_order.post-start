#!/usr/bin/env bash
source `which tools`
set +e
info "checking ${name}"
unset HEALTHCHECK
ORDER_LOCAL="${HEADQUARTERS_LOCAL}/${order}/git"
run_orders "${HEADQUARTERS_LOCAL}/${order}/orders"
if [ "${UNPUBLISHED}" == "1" ]; then
  echo 'online' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
  starphleet-expose "${name}" "${HEADQUARTERS_LOCAL}/${order}/orders"
  starphleet-reaper "${name}" "${order}"
else
  #status logging, here indicating the healthcheck is about to go
  echo 'checking' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
  #the container and service is started, so healthcheck it before we publish it
  #in order to have a real drainstop / transparent upgrade feature
  #if there is a specified healthcheck url
  if [ -z "${HEALTHCHECK}" ] || starphleet-healthcheck "${name}" "${PORT}" "${HEALTHCHECK}"; then
    #at this point we have a running container, and it answers HTTP, so we
    #are on the air and can expose it via nginx
    #new versions replace old versions in nginx for the HUP update
    #http basic password authentication access
    if [ -f "${HEADQUARTERS_LOCAL}/${order}/.htpasswd" ]; then
      HTPASSWD="${HEADQUARTERS_LOCAL}/${order}/.htpasswd"
    else
      HTPASSWD='-'
    fi
    #and LDAP access, almost the same kind of thing -- but LDAPy
    if [ -f "${HEADQUARTERS_LOCAL}/${order}/.ldap" ]; then
      LDAP="${HEADQUARTERS_LOCAL}/${order}/.ldap"
    else
      LDAP='-'
    fi
    trace "${name}" "${PORT}" "${PUBLISH_PORT}" "/${order}" "${HTPASSWD}" "${LDAP}"
    if ! starphleet-publish "${name}" "/${order}" "${HEADQUARTERS_LOCAL}/${order}/orders" "${HTPASSWD}" "${LDAP}" ; then
      echo 'publish failed' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
      exit 1
    fi
    #record online, with the IP address of the container
    echo 'online' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
    echo "${name}" > "${CURRENT_ORDERS}/${order}/.last_known_good_container"
    lxc-ls --fancy "${name}" | tail -1 | awk '{ print $3; }' > "${CURRENT_ORDERS}/${order}/.starphleetstatus.ip"
    echo "${PORT}" > "${CURRENT_ORDERS}/${order}/.starphleetstatus.port"
    # Expose any ports requested in the orders
    starphleet-expose "${name}" "${HEADQUARTERS_LOCAL}/${order}/orders"
    #any prior version of this order should now be reaped after
    #we wait a small time for prior requests to flush out
    sleep ${STARPHLEET_DRAINSTOP_WAIT}
    starphleet-reaper "${name}" "${order}"

    ###################################
    ## Persistent healchecker
    ###################################

    if [ -n "${HEALTHCHECK}" ]; then
      HEALTHCHECK_TIMEOUT=${HEALTHCHECK_TIMEOUT:-30}
      IP_ADDRESS=$(lxc-ls --fancy | grep "^${name}[[:space:]]" | awk '{ print $3; }')
      TEST_PASSED=false
      FAILED_COUNT=0
      while [ 1 ];
      do
        if [ "${name}" != "$(cat ${CURRENT_ORDERS}/${order}/.container)" ]; then
          # If this isn't the current container the healthcheck timer should punt
          # without an error
          warn "Container is no longer active - healthcheck stopping"
          exit 0
        fi
        sleep ${STARPHLEET_PULSE};
        TEST_GET="http://${IP_ADDRESS}:${PORT}${HEALTHCHECK}"
        TEST_COMMAND="curl -X GET --connect-timeout ${HEALTHCHECK_TIMEOUT} -o /dev/null -s -w %{response_code} ${TEST_GET}"
        RESULT=`${TEST_COMMAND}`
        # Less logging for now
        # warn Healthcheck Result: ${RESULT}
        if [ ${RESULT} == "200" ]; then
          # Reset the failed counter
          FAILED_COUNT=0
          continue;
        fi
        error Failed Healthcheck ${TEST_GET}
        ((FAILED_COUNT++))
        # we'll read a timeout configuration from our environment, and if its not
        # specified, we'll just default to the actual controlling loop (for loop)
        # boundary.  So this will allow you to specify some value other other than
        # the default (180) without ever surpassing the default of 180.
        # since our caller sources the orders file, this can be added to your orders
        # for a specific service
        HEALTHCHECK_RETRY_COUNT=${HEALTHCHECK_RETRY_COUNT:-3}
        if [ $FAILED_COUNT -gt ${HEALTHCHECK_RETRY_COUNT} ]; then
          error "Healthcheck Failed too many times - restarting service"
          # Debug Emailing
          if [ -n "${HEALTHCHECK_NOTIFICATIONS_EMAIL_ADDRESS}" ]; then
            echo "Healthcheck Restart for ${name} on ${STARPHLEET_EC2_REGION}" |
              mail -s "Persistent Healthcheck Restart - ${name}" "${HEALTHCHECK_NOTIFICATIONS_EMAIL_ADDRESS}"
          fi
          warn starphleet-lxc-stop "${name}"
          starphleet-lxc-stop "${name}"
          exit 1
        fi
      done
    fi

    ###################################
    ## End persistent healchecker
    ###################################

  else
    #at this point the service has failed to properly start
    warn service failed to publish "/${order}"
    echo 'failed' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
    mail_log
    exit 1
  fi
fi
