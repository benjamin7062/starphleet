#!/usr/bin/env bash
source `which tools`
set +e
info "checking ${name}"

# Make sure we don't have any settings from previous orders
unset HEALTHCHECK

ORDER_LOCAL="${HEADQUARTERS_LOCAL}/${order}/git"
STATUS_FILE="${CURRENT_ORDERS}/${order}/.starphleetstatus.${name}"

run_orders "${HEADQUARTERS_LOCAL}/${order}/orders"

# Give the service a chance to light up
sleep ${STARPHLEET_DRAINSTOP_WAIT}

# Deploy all the things
if [ "${UNPUBLISHED}" == "1" ]; then
  echo 'online' > "${STATUS_FILE}"
  starphleet-expose "${name}" "${HEADQUARTERS_LOCAL}/${order}/orders"
  starphleet-reaper "${name}" "${order}"
else
  #status logging, here indicating the healthcheck is about to go
  echo 'checking' > "${STATUS_FILE}"
  lxc-ls --fancy "${name}" | tail -1 | awk '{ print $3; }' > "${STATUS_FILE}.ip"
  echo "${PORT}" > "${STATUS_FILE}.port"
  # Reduce the hits to lxc-ls --fancy by  making this available sooner
  #the container and service is started, so healthcheck it before we publish it
  #in order to have a real drainstop / transparent upgrade feature
  #if there is a specified healthcheck url
  if [ -z "${HEALTHCHECK}" ] || starphleet-healthcheck "${name}" "${order}" "${HEALTHCHECK}" ; then
    #at this point we have a running container, and it answers HTTP, so we
    #are on the air and can expose it via nginx
    #new versions replace old versions in nginx for the HUP update
    #http basic password authentication access
    if [ -f "${HEADQUARTERS_LOCAL}/${order}/.htpasswd" ]; then
      HTPASSWD="${HEADQUARTERS_LOCAL}/${order}/.htpasswd"
    else
      HTPASSWD='-'
    fi
    #and LDAP access, almost the same kind of thing -- but LDAPy
    if [ -f "${HEADQUARTERS_LOCAL}/${order}/.ldap" ]; then
      LDAP="${HEADQUARTERS_LOCAL}/${order}/.ldap"
    else
      LDAP='-'
    fi
    trace "${name}" "${PORT}" "${PUBLISH_PORT}" "/${order}" "${HTPASSWD}" "${LDAP}"
    if ! starphleet-publish "${name}" "/${order}" "${HEADQUARTERS_LOCAL}/${order}/orders" "${HTPASSWD}" "${LDAP}" ; then
      warn "Publish Failed - Container: ${name} / Order: ${order}"
      echo 'publish failed' > "${STATUS_FILE}"
      exit 1
    fi
    # record online
    echo 'online' > "${STATUS_FILE}"
    # Only update the active container if we get a successful publish
    echo "${name}" > "${CURRENT_ORDERS}/${order}/.container"
    echo "${name}" > "${CURRENT_ORDERS}/${order}/.last_known_good_container"
    # Expose any ports requested in the orders
    starphleet-expose "${name}" "${HEADQUARTERS_LOCAL}/${order}/orders"
    # Reap non-building other containers
    starphleet-reaper "${name}" "${order}"
    # If a healthcheck exists - start our healthchecker
    if [ -n "${HEALTHCHECK}" ]; then
      warn "Starting healthchecker for ${order} on container ${name}"
      start --no-wait starphleet_orders_healthcheck name="${name}" order="${order}"
    fi
    # For good measure
    exit 0
  else
    #at this point the service has failed to properly start
    warn Service failed to publish "${order}" for container ${name}
    echo 'failed' > "${STATUS_FILE}"
    mail_log
    exit 1
  fi
fi
