#!/usr/bin/env bash
### Usage:
###    starphleet-public-keys
### --help
###
### Call this to synchronize headquarters public keys to the admiral
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/tools
help=$(grep "^### " "$0" | cut -c 5-)
eval "$(${DIR}/docopts -h "$help" -V "$version" : "$@")"

#grant The Admiral access
# the auth keys are reset everytime
# this means if any keys have been manually added to the account, they will be overwritten
# When there are no authkeys in the HQ repo, no ssh access is left around
ADMIRALSSH="${ADMIRAL_HOME}/.ssh"
AUTHFILE="${ADMIRALSSH}/authorized_keys"
test -f "${AUTHFILE}" && rm "${AUTHFILE}"

# look for some auth keys in the HQ repo, when found add them all to the ssh auth keys to allow ssh access
ADMIRALAUTHKEYS=${ADMIRALAUTHKEYS:-"${HEADQUARTERS_LOCAL}/authorized_keys"}
# base touch on auth file to create
touch ${AUTHFILE}
#look for public keys pushed on the ship as well as in the headquarters
for f in $(find "${ADMIRALAUTHKEYS}" "${PUBLIC_KEYS}" | grep -v '\.git')
do
  if ssh-keygen -l -f "${f}" > /dev/null; then
    #direct ssh as the admiral
    cat "${f}" >> ${AUTHFILE}
    echo '' >> ${AUTHFILE}
  fi
done
cat "${ADMIRALSSH}/id_rsa.pub" >> ${AUTHFILE}

chmod 600 ${AUTHFILE}
chown ${ADMIRAL}:${ADMIRAL} ${AUTHFILE}

# Grant Captain access
# The captain user has reduced access to the server intended for managing
# apps. The auth keys are reset everytime
# this means if any keys have been manually added to the account, they will be overwritten
# When there are no authkeys in the HQ repo, no ssh access is left around
CAPTAINSSH="${CAPTAIN_HOME}/.ssh"
AUTHFILE="${CAPTAINSSH}/authorized_keys"
test -f "${AUTHFILE}" && rm "${AUTHFILE}"

# look for some auth keys in the HQ repo, when found add them all to the ssh auth keys to allow ssh access
CAPTAINAUTHKEYS=${CAPTAINAUTHKEYS:-"${HEADQUARTERS_LOCAL}/authorized_keys"}
# base touch on auth file to create
touch ${AUTHFILE}
#look for public keys pushed on the ship as well as in the headquarters
for f in $(find "${CAPTAINAUTHKEYS}" "${PUBLIC_KEYS}" | grep -v '\.git')
do
  if ssh-keygen -l -f "${f}" > /dev/null; then
    #direct ssh as the admiral
    cat "${f}" >> ${AUTHFILE}
    echo '' >> ${AUTHFILE}
  fi
done
cat "${CAPTAINSSH}/id_rsa.pub" >> ${AUTHFILE}

chmod 600 ${AUTHFILE}
chown ${CAPTAIN}:${CAPTAIN} ${AUTHFILE}


#look for SSL keys
[ -d "${NGINX_CONF}/published" ] || mkdir -p "${NGINX_CONF}/published"
if [ "$(diff -r ${HEADQUARTERS_LOCAL}/ssl/ ${NGINX_CONF}/published/ | grep -v "Only in ${NGINX_CONF}/published/")" == "" ] ; then
  info "no change in ssl keys provided in HQ"
else
  info updating SSL keys
  cp ${HEADQUARTERS_LOCAL}/ssl/* ${NGINX_CONF}/published/
fi
